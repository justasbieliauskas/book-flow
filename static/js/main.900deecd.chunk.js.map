{"version":3,"sources":["AddNew.js","Books.js","Chapters.js","Arguments.js","App.js","serviceWorker.js","index.js"],"names":["AddNew","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showInput","value","handleInput","bind","assertThisInitialized","handleAddClick","event","setState","target","add","react_default","a","createElement","Form_default","Row","Col_default","xs","Control","size","placeholder","onChange","Button_default","onClick","Component","Books","Container_default","books","map","book","key","id","react_router_dom","to","title","AddNew_AddNew","addNew","Chapters","handleAdd","_this2","find","chapters","chapter","concat","Arguments","argument","bookId","chapterId","arguments","index","App","addBook","addChapter","addArgument","lastId","length","toConsumableArray","push","react_router","path","exact","render","Books_Books","Arguments_Arguments","parseInt","match","params","Chapters_Chapters","Boolean","window","location","hostname","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.900deecd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nexport default class AddNew extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {showInput: false, value: ''};\n    this.handleInput = this.handleInput.bind(this);\n    this.handleAddClick = this.handleAddClick.bind(this);\n  }\n\n  handleInput(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleAddClick() {\n    if(!this.state.showInput) {\n      this.setState({showInput: true});\n    } else {\n      this.props.add(this.state.value);\n      this.setState({showInput: false, value: ''});\n    }\n  }\n\n  render() {\n    return (\n      <Form.Row>\n        {this.state.showInput &&\n          <Col xs={9}>\n            <Form.Control \n              size=\"sm\"\n              placeholder={this.props.placeholder}\n              onChange={this.handleInput}\n            />\n          </Col>\n        }\n        <Col xs={3}>\n          <Button\n            size=\"sm\"\n            onClick={this.handleAddClick}\n          >\n            Add\n          </Button>\n        </Col>\n      </Form.Row>\n    );\n  }\n}\n","import { Link } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\n\nimport AddNew from './AddNew';\n\nexport default class Books extends Component {\n  render() {\n    return (\n      <Container>\n        <h1>Books</h1>\n        <ul>\n          {this.props.books.map(book => {\n            return (\n              <li key={book.id}>\n                <Link to={'/books/' + book.id}>\n                  {book.title}\n                </Link>\n              </li>\n            );\n          })}\n          <li>\n            <AddNew\n              placeholder=\"Book title\"\n              add={this.props.addNew}\n            />\n          </li>\n        </ul>\n      </Container>\n    );\n  }\n}\n","import { Link } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\n\nimport AddNew from './AddNew';\n\nexport default class Chapters extends Component {\n  constructor(props) {\n    super(props);\n    this.handleAdd = this.handleAdd.bind(this);\n  }\n\n  handleAdd(title) {\n    this.props.add(this.props.id, title);\n  }\n\n  render() {\n    const withId = book => book.id === this.props.id;\n    const book = this.props.books.find(withId);\n    return (\n      <Container>\n        <h1>{book.title}</h1>\n        <ul>\n          {book.chapters.map(chapter => {\n            return (\n              <li key={chapter.id}>\n                <Link to={`/books/${book.id}/chapters/${chapter.id}`}>\n                  {chapter.title}\n                </Link>\n              </li>\n            );\n          })}\n          <li>\n            <AddNew \n              placeholder=\"Chapter title\"\n              add={this.handleAdd}\n            />\n          </li>\n        </ul>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\n\nimport AddNew from './AddNew';\n\nexport default class Arguments extends Component {\n  constructor(props) {\n    super(props);\n    this.handleAdd = this.handleAdd.bind(this);\n  }\n\n  get chapter() {\n    const withBookId = book => book.id === this.props.bookId;\n    const withChapterId = chapter => chapter.id === this.props.chapterId;\n    const book = this.props.books.find(withBookId);\n    return book.chapters.find(withChapterId);\n  }\n\n  handleAdd(argument) {\n    this.props.add(\n      this.props.bookId,\n      this.props.chapterId,\n      argument\n    );\n  }\n\n  render() {\n    const chapter = this.chapter;\n    return (\n      <Container>\n        <h1>{chapter.title}</h1>\n        <ul>\n          {chapter.arguments.map((argument, index) => {\n            return (\n              <li key={index}>\n                {argument}\n              </li>\n            );\n          })}\n          <li>\n            <AddNew \n              placeholder=\"Argument\"\n              add={this.handleAdd}\n            />\n          </li>\n        </ul>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Books from './Books';\nimport Chapters from './Chapters';\nimport Arguments from './Arguments';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      books: [\n        {\n          id: 0,\n          title: 'Code Ahead',\n          chapters: [\n            {\n              id: 0,\n              title: 'Adrian',\n              arguments: [\n                'First argument',\n                'Second argument',\n                'Argument number three',\n              ],\n            },\n            {id: 1, title: 'Dennis'},\n            {id: 2, title: 'Tony'},\n          ],\n        },\n        {id: 1, title: '12 Rules For Life'},\n        {id: 2, title: 'Homo Deus'},\n      ],\n    };\n    \n    this.addBook = this.addBook.bind(this);\n    this.addChapter = this.addChapter.bind(this);\n    this.addArgument = this.addArgument.bind(this);\n  }\n\n  addBook(title) {\n    const books = this.state.books;\n    const lastId = books[books.length - 1].id;\n    this.setState({\n      books: [\n        ...books,\n        {id: lastId + 1, title, chapters: []},\n      ],\n    });\n  }\n\n  addChapter(bookId, title) {\n    const books = [...this.state.books];\n    const book = books.find(book => book.id === bookId);\n    const chapters = book.chapters;\n    const lastId = chapters.length > 0 ? chapters[chapters.length - 1].id : -1;\n    book.chapters.push({id: lastId + 1, title, arguments: []});\n    this.setState({books});\n  }\n\n  addArgument(bookId, chapterId, argument) {\n    const books = [...this.state.books];\n    const book = books.find(book => book.id === bookId);\n    const chapter = book.chapters.find(chapter => chapter.id === chapterId);\n    chapter.arguments.push(argument);\n    this.setState({books});\n  }\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route\n            path=\"/\"\n            exact\n            render={() => <Books books={this.state.books} addNew={this.addBook} />}\n          />\n          <Route \n            path=\"/books/:bookId/chapters/:chapterId\"\n            render={props => {\n              return (\n                <Arguments\n                  chapter=\"Chapter\"\n                  books={this.state.books}\n                  bookId={parseInt(props.match.params.bookId)}\n                  chapterId={parseInt(props.match.params.chapterId)}\n                  add={this.addArgument}\n                />\n              );\n            }}\n          />\n          <Route\n            path=\"/books/:id\"\n            render={props => {\n              return (\n                <Chapters \n                  books={this.state.books}\n                  id={parseInt(props.match.params.id)}\n                  add={this.addChapter}\n                />\n              );\n            }}\n          />\n        </Switch>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}