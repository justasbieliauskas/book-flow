{"version":3,"sources":["Books.js","Chapters.js","Arguments.js","App.js","serviceWorker.js","index.js"],"names":["Books","react_default","a","createElement","Container_default","this","props","books","map","book","key","id","react_router_dom","to","title","Component","Chapters","_this","find","chapters","chapter","concat","Arguments","arguments","argument","index","bookId","chapterId","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this2","react_router","path","exact","render","Books_Books","Arguments_Arguments","parseInt","match","params","Chapters_Chapters","Boolean","window","location","hostname","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96a9a23c.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\n\nexport default class Books extends Component {\n  render() {\n    return (\n      <Container>\n        <h1>Books</h1>\n        <ul>\n          {this.props.books.map(book => {\n            return (\n              <li key={book.id}>\n                <Link to={'/books/' + book.id}>\n                  {book.title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </Container>\n    );\n  }\n}\n","import { Link } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\n\nexport default class Chapters extends Component {\n  render() {\n    const withId = book => book.id === this.props.id;\n    const book = this.props.books.find(withId);\n    return (\n      <Container>\n        <h1>{book.title}</h1>\n        <ul>\n          {book.chapters.map(chapter => {\n            return (\n              <li key={chapter.id}>\n                <Link to={`/books/${book.id}/chapters/${chapter.id}`}>\n                  {chapter.title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\n\nexport default class Arguments extends Component {\n    get chapter() {\n      const withBookId = book => book.id === this.props.bookId;\n      const withChapterId = chapter => chapter.id === this.props.chapterId;\n      const book = this.props.books.find(withBookId);\n      return book.chapters.find(withChapterId);\n    }\n\n    render() {\n      const chapter = this.chapter;\n      return (\n        <Container>\n          <h1>{chapter.title}</h1>\n          <ul>\n            {chapter.arguments.map((argument, index) => {\n              return (\n                <li key={index}>\n                  {argument}\n                </li>\n              );\n            })}\n          </ul>\n        </Container>\n      );\n    }\n}\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Books from './Books';\nimport Chapters from './Chapters';\nimport Arguments from './Arguments';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.books = [\n      {\n        id: 0,\n        title: 'Code Ahead',\n        chapters: [\n          {\n            id: 0,\n            title: 'Adrian',\n            arguments: [\n              'First argument',\n              'Second argument',\n              'Argument number three',\n            ],\n          },\n          {id: 1, title: 'Dennis'},\n          {id: 2, title: 'Tony'},\n        ],\n      },\n      {id: 1, title: '12 Rules For Life'},\n      {id: 2, title: 'Homo Deus'},\n    ];\n  }\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route\n            path=\"/\"\n            exact\n            render={() => <Books books={this.books} />}\n          />\n          <Route \n            path=\"/books/:bookId/chapters/:chapterId\"\n            render={props => {\n              return (\n                <Arguments\n                  chapter=\"Chapter\"\n                  books={this.books}\n                  bookId={parseInt(props.match.params.bookId)}\n                  chapterId={parseInt(props.match.params.chapterId)}\n                />\n              );\n            }}\n          />\n          <Route\n            path=\"/books/:id\"\n            render={props => {\n              return (\n                <Chapters \n                  books={this.books}\n                  id={parseInt(props.match.params.id)}\n                />\n              );\n            }}\n          />\n        </Switch>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}